#include "ros/ros.h"
#include "ros/service_callback_helper.h"
#include "std_srvs/Empty.h"
#include "std_msgs/Empty.h"
#include "std_msgs/String.h"
#include "tum_ardrone/filter_state.h"
#include "ardrone_autonomy/LedAnim.h"
#include <ardrone_autonomy/Navdata.h>
#include <string>
#include <sstream>
#include <geometry_msgs/Twist.h>       //For motion command, except takeoff, land and reset
#include <termios.h>                   //For keyboard
#include <stdio.h>  
#include <termios.h>  
#include <unistd.h>  
#include <fcntl.h>  

#define ptam_x      0   // Current x-position from ptam
#define ptam_y      1   // Unit of position is 'm'
#define ptam_z	    2
#define ptam_yaw    3   // Unit of yaw is degree, range is from -180 ~ 180

//--------------kbhit function model in Linux----------------
int kbhit(void)  
{  
  struct termios oldt, newt;  
  int ch;  
  int oldf;  
  tcgetattr(STDIN_FILENO, &oldt);  
  newt = oldt;  
  newt.c_lflag &= ~(ICANON | ECHO);  
  tcsetattr(STDIN_FILENO, TCSANOW, &newt);  
  oldf = fcntl(STDIN_FILENO, F_GETFL, 0);  
  fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);  
  ch = getchar();  
  tcsetattr(STDIN_FILENO, TCSANOW, &oldt);  
  fcntl(STDIN_FILENO, F_SETFL, oldf);  
  if(ch != EOF)  
  {  
    ungetc(ch, stdin);  
    return 1;  
  }  
  return 0;  
}  




//------Set a "class" for different kinds of functions--------
class ArdroneControl
{
  public:
    ArdroneControl();

  private:
    void takeoff();
    void land();
    void reset();
    void Manual(int com_char);
    int keyboard(); 
    int index2;
    float Position[4];
    float Target[4];
    char manual_selection;

    ros::NodeHandle n;                               // so that we dont make a copy while passing this as reference
    ros::Subscriber nav_sub;                         // subscribing to the pos_estimate_data from the and tum_ardrone topic
    ros::Publisher cmd_vel_pub;                      // this will be publishing the command velocity to the drone
    ros::Publisher tum_ardrone_pub;		     // this will be publishing the Target to the TUM package
    geometry_msgs::Twist twist_manual, twist_pos;    // the message we use to send command to the drone
    
    void nav_callback(const tum_ardrone::filter_stateConstPtr tum_msg);
};


//-------Set up all members in the "ArdroneControl class"------
ArdroneControl::ArdroneControl()
{
  cmd_vel_pub = n.advertise<geometry_msgs::Twist>("cmd_vel", 1, true);
  nav_sub = n.subscribe("/ardrone/predictedPose", 50, &ArdroneControl::nav_callback, this);
  tum_ardrone_pub = n.advertise<std_msgs::String>("tum_ardrone/com",50, true);

  twist_manual.linear.x = twist_manual.linear.y = twist_manual.linear.x = 0.0;
  Target[ptam_x] = Target[ptam_y] = Target[ptam_z] = Target[ptam_yaw] = 0.0;
  index2 = 0;
}

void ArdroneControl::takeoff()
{
  ros::Rate poll_rate(100);

  ros::Publisher takeoff = n.advertise<std_msgs::Empty>("ardrone/takeoff", 1, true);
  takeoff.publish(std_msgs::Empty());

  while(takeoff.getNumSubscribers() == 0)
      poll_rate.sleep();  
  takeoff.shutdown();

  ROS_INFO("TAKEOFF");
}

void ArdroneControl::reset()
{
  ROS_INFO("RESET");
  ros::Rate poll_rate(100);

  ros::Publisher reset = n.advertise<std_msgs::Empty>("ardrone/reset", 1, true);
  reset.publish(std_msgs::Empty());

  while(reset.getNumSubscribers() == 0)
      poll_rate.sleep();  
  reset.shutdown();

  
}

void ArdroneControl::land()
{
  ros::Rate poll_rate(100);

  ros::Publisher landing = n.advertise<std_msgs::Empty>("ardrone/land", 1, true);
  landing.publish(std_msgs::Empty());

  while(landing.getNumSubscribers() == 0)
      poll_rate.sleep();  
  landing.shutdown();


  ROS_INFO("LAND");
}


//------Function for detecting the keyboard input without "Enter"----------
int ArdroneControl::keyboard()
{
  static struct termios oldt, newt;
  tcgetattr( STDIN_FILENO, &oldt);           // save old settings
  newt = oldt;
  newt.c_lflag &= ~(ICANON);                 // disable buffering      
  tcsetattr( STDIN_FILENO, TCSANOW, &newt);  // apply new settings

  int c = getchar();                         // read character (non-blocking)

  tcsetattr( STDIN_FILENO, TCSANOW, &oldt);  // restore old settings
  return c;
}

void ArdroneControl::Manual(int com_char)
{
	if(ros::ok())
	{
        bool index = 0;
		switch(com_char)
		{
			case 't':
				takeoff();
				index = 0;
			break;

			case 'r':
				reset();
				index = 0;
			break;

			case 'l':	
				land();
				index = 0;
			break;

            		case 'w': //forward
			if( twist_manual.linear.x < 0.9 )
			{                	
				twist_manual.linear.x = twist_manual.linear.x + 0.1;
				ROS_INFO("move forward");
				index = 1;
			}		
			break;

            		case 's': //backward
			if( twist_manual.linear.x > -0.9 )
			{
				twist_manual.linear.x = twist_manual.linear.x - 0.1;
				ROS_INFO("move backward");
				index = 1;
			}
			break;

            		case 'a': //left
			if( twist_manual.linear.y < 0.9 )
			{
				twist_manual.linear.y = twist_manual.linear.y + 0.1;
				ROS_INFO("move left");
				index = 1;
			}
			break;

            		case 'd': //right
			if( twist_manual.linear.y > -0.9 )
			{
				twist_manual.linear.y = twist_manual.linear.y - 0.1;
				ROS_INFO("move right");
				index = 1;
			}
			break;

            		case '+': //up
			if( twist_manual.linear.z < 0.9 )
			{
				twist_manual.linear.z = twist_manual.linear.z + 0.1;
				ROS_INFO("move up");
				index = 1;
			}
			break;

            		case '-': //down
			if( twist_manual.linear.z > -0.9 )
			{
				twist_manual.linear.z = twist_manual.linear.z - 0.1;
				ROS_INFO("move down");
				index = 1;
			}
			break;
		}
	  
		if( index == 1)
		{
		        cmd_vel_pub.publish(twist_manual);
                        std::stringstream ss;
		        ss << "Output: " <<twist_manual.linear.x<< " " <<twist_manual.linear.y<< " " <<twist_manual.linear.z;
		        std::string s = ss.str();
                        ROS_INFO(s.c_str());
                        ROS_INFO("\n Command:");
		} 
	  }
}


void ArdroneControl::nav_callback(const tum_ardrone::filter_stateConstPtr tum_msg)
{
  	
    if(index2 == 0)
	{
        ROS_INFO("Mode Selection--> 'p' for position control; 'n' for manual (x for \"STOP\" ):");
		manual_selection = getchar();
        if(manual_selection == 'p' || manual_selection == 'n')
			index2 = 1;
	}
    if(manual_selection == 'p')
    {  	
        Position[ptam_x] = float(tum_msg->x);
        Position[ptam_y] = float(tum_msg->y);
        Position[ptam_z] = float(tum_msg->z);
        Position[ptam_yaw] = float(tum_msg->yaw);
        
        ROS_INFO("Please enter your target like-->0.5 -0.5 0 0 :");
        float parameters[5];
        char tar_command[30];
        gets(tar_command);
        if (tar_command[0] == 'x')
            index2 = 0;
        if (tar_command[0] == 'l')
            land();
        if(sscanf(tar_command,"%f %f %f %f",&parameters[0], &parameters[1], &parameters[2], &parameters[3]) == 4)
        {
                    std::stringstream ss;
		    ss <<"c " << "goto " <<parameters[0]<< " " <<parameters[1]<< " " <<parameters[2]<< " "<<parameters[3];
		    std::string s = ss.str();
                    ROS_INFO(s.c_str());
                    ROS_INFO("Set up the Target!!");
                    
                    std_msgs::String com;
                    com.data = s.c_str();
                    tum_ardrone_pub.publish(com);
        }  
     }  
     if(manual_selection == 'n')
     {
		int com_char = keyboard();
		if( com_char == 'x')
		{
			ROS_INFO("Break");            		
			index2 = 0;
		}
		if( com_char != 'x')			
		{
            ROS_INFO("Manual Mode--> w a s d; t:takeoff, l:land, r:reset  (x for \"STOP\" ):");
			Manual(com_char);
		}
     }  
}


//------------Main function-----------------
int main(int argc, char **argv)
{
  ros::init(argc, argv, "tum_test02");
  ROS_INFO("START");
  
  ArdroneControl ardrone_control;

  ros::spin();

  return 0;
}
